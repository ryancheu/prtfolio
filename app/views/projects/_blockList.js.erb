// Primary Author: psaylor

$(function() {
  /* Javascript representation for a resource in Rails.
  Maintains the type and id of a resource.
  */
  var Resource = function() {
    var resource_id = null;
    var resource_type = null;
    var object = {
      update: function (type, id) {
        resource_type = type;
        resource_id = id;
      },
      get_id: function() { return resource_id},
      get_type: function() { return resource_type},
    };

    return object;
  };

  /* Javascript representation for a block in Rails.
  Maintains the information about the block as it is modified
  and updates the block's form accordingly */
  Block = function (bid) {
    var block_id = bid;
    var res0 = Resource(); // Single Resource
    var res1 = Resource(); // Left Resource
    var res2 = Resource(); // Right Resource
    var res3 = Resource(); // Top Resource
    var res4 = Resource(); // Bottom Resource

    var template_id = -1;
    // Single Resource, Left Resource, Right Resource, Top Resource, Bottom Resource
    var pos0, pos1, pos2, pos3, pos4;

    var form;

    // Takes a resource and sets the firstres input fields in the form to its type and id
    // Clears the input fields if res is undefined
    var set_firstres_in_form = function (res) {
      if (res === undefined) {
        form.find("#block_firstres_id").val("");
        form.find("#block_firstres_type").val("");
        return;
      }
      form.find("#block_firstres_id").val(res.get_id());
      form.find("#block_firstres_type").val(res.get_type());
    };

    // Takes a resource and sets the secondres input fields in the form to its type and id
    // Clears the input fields if res is undefined
    var set_secondres_in_form = function (res) {
      if (res === undefined) {
        form.find("#block_secondres_id").val("");
        form.find("#block_secondres_type").val("");
        return;
      }
      form.find("#block_secondres_id").val(res.get_id());
      form.find("#block_secondres_type").val(res.get_type());
    };

    // the object to be returned that holds all of block's "public" functions
    var self = createObject(Block.prototype);
    console.log("i reached here")
    // Sets the template_id of the block to tid and returns the updated template_id
    self.set_template = function (tid) {
      console.log("in set template");
      console.log("Block " + bid + " template set to " + tid);
      template_id = tid;
      form.submit();
      return template_id;
    };

    self.get_template = function () {
      console.log("in get template");
      return template_id;
    };

    // Updates the resource at position res_pos in the block's template
    // to have the type and id specified
    // Also set the view of that resource in the block to the provided partial
    self.update_resource = function (res_pos, res_type, res_id, partial, skipSubmit) {
      skipSubmit = skipSubmit || false;
      console.log("Updating resource at position " + res_pos + " with type " + res_type + " and id " + res_id);
      if (res_pos == 0 ) {
        console.log("Upating single resource");
        res0.update(res_type, res_id);
        pos0.html(partial);

      } else if (res_pos == 1) {
        console.log("Upating left resource");
        res1.update(res_type, res_id);
        pos1.html(partial);

      } else if (res_pos == 2) {
        console.log("Upating right resource");
        res2.update(res_type, res_id);
        pos2.html(partial);

      } else if (res_pos == 3) {
        console.log("Upating top resource");
        res3.update(res_type, res_id);
        pos3.html(partial);

      } else if (res_pos == 4) {
        console.log("Upating bottom resource");
        res4.update(res_type, res_id);
        pos4.html(partial);
      }
      if (!skipSubmit) {
        form.submit();
      }
    };

    self.swap_resources = function () {
      if (template_id == 1) { // Single Resource Template
        console.error("Cannot swap resources on template 1");
      } else if (template_id == 2) { // Left/Right Template
        console.log("Swapping left and right resources");
        var temp_res = res1;
        res1= res2;
        res2 = temp_res;
      } else if (template_id == 3) { // Top/Bottom Template
        console.log("Swapping top and bottom resources");
        var temp_res = res3;
        res3= res4;
        res4 = temp_res;
      } else {
        console.error("Cannot swap resources of undefined template");
      }
    };

    // Sets the template to tid and loads the resource ids and types specified in the resources hash into the appropriate resources given the template
    self.load = function (resources) {
      template_id = resources.tid;
      console.log(resources);
      if (template_id == 1) { // Single Resource Template
        console.log("Loading single resource");
        self.update_resource(0, resources.type1, resources.id1, "HI 0", true);
      } else if (template_id == 2) { // Left/Right Template
        console.log("Loading left and right resources");
        self.update_resource(1, resources.type1, resources.id1, "HI 1", true);
        self.update_resource(2, resources.type2, resources.id2, "HI 2", true);
      } else if (template_id == 3) { // Top/Bottom Template
        console.log("Loading top and bottom resources");
        self.update_resource(3, resources.type1, resources.id1, "HI 3", true);
        self.update_resource(4, resources.type2, resources.id2, "HI 4", true);
      } else {
        console.error("Cannot load resources of undefined template "+template_id + ".");
      }
    };

    self.save = function () {
      console.log("Saving block with template ");
      // Set the template id if valid
      if (template_id === 1 || template_id === 2 || template_id === 3) {
        form.find("#block_template_id").val(template_id);
      } else {
        console.error("Cannot save block with invalid template " + template_id);
        return;
      }

      // Set the resources based on the current template
      if (template_id === 1) { // Single Resource Template
        set_firstres_in_form(res0);
        set_secondres_in_form();
      } else if (template_id === 2) { // Left/Right Template
        set_firstres_in_form(res1);
        set_secondres_in_form(res2);
      } else if (template_id === 3) { // Top/Bottom Template
        set_firstres_in_form(res3);
        set_secondres_in_form(res4);
      } 
    };

    self.on_resource_positions_ready = function () {
      pos0 = $("[data-block-id="+block_id+"] [data-pos=0]"); // Single Resource
      pos1 = $("[data-block-id="+block_id+"] [data-pos=1]"); // Left Resource
      pos2 = $("[data-block-id="+block_id+"] [data-pos=2]"); // Right Resource
      pos3 = $("[data-block-id="+block_id+"] [data-pos=3]"); // Top Resource
      pos4 = $("[data-block-id="+block_id+"] [data-pos=4]"); // Bottom Resource
    };

    self.on_form_ready = function () {
      console.log("Form Ready");
      form = $("#block-"+block_id+" form");
      form.submit(function (event) {
        console.log("Saving Form for block " + block_id);
        self.save();
      });
    };

    <% if Rails.env.development? %>
      self.pos0 = function () {
        return pos0;
      };
      self.pos1 = function () {
        return pos1;
      };
      self.pos2 = function () {
        return pos2;
      };
      self.pos3 = function () {
        return pos3;
      };
      self.pos4 = function () {
        return pos4;
      };
      
    <% end %>
    Object.freeze(self);
    return self;

  };

  BlockList = function () {
    var bList = new Array();

    var self = createObject(BlockList.prototype);

    // Creates a new block instance with block_id bid and adds it to the BlockList; returns the new block
    self.create_and_add_block = function (bid) {
      var b = Block(bid);
      bList[bid] = b;
      return b;
    };

    // Returns the block in BlockList with block_id bid 
    self.get_block = function (bid) {
      return bList[bid];
    }

    // Removes the block in BlockList with block_id bid and returns it
    self.remove_block = function (bid) {
      var b = bList[bid];
      bList[bid] = undefined;
      return b;
    }

    Object.freeze(self);
    return self;

  }

});