$(document).ready(function(){
  // Add one page scroll to the project page

  $(".main").onepage_scroll();

  // Initialize title and description as medium editable elements, with content from project
    var proj_title_medium = new Medium({
      element: document.getElementById('proj-title'),
      mode: 'inline',
      maxLength: 30,
      placeholder: 'Project title'
    });
    
    var proj_desc_medium = new Medium({
      element: document.getElementById('proj-description'),
      mode: 'partial',
      maxLength: 100,
      placeholder: 'Project subtitle'
    });

    // populate the title and description fields if appropriate
    <% if can_show? @project.title %>
      $('#proj-title').html("<%= @project.title.html_safe %>");
    <% end %>

    <% if can_show? @project.description %>
      $("#proj-description").html("<%= @project.description.html_safe %>");
    <% end %>

    // save the title and description when it loses focus
    $("#proj-title").blur(function() {
      var updated_title = $(this).html();
      console.log("Updated Title: " + updated_title);
      if (proj_title_medium.isEmpty()) {
        updated_title = "";
      }
      $("#project_title").val(updated_title);
    });

    $("#proj-description").blur(function() {
      var updated_description = $(this).html();
      console.log("Updated Description: " + updated_description);
      if (proj_desc_medium.isEmpty()) {
        updated_description = "";
      }
      $("#project_description").val(updated_description);
    });


    // javascript to handle choosing of templates for block design 


  // Create a new section for one page scrolling
  create_section = function(new_section_html, block_id){
    //determine how to color the section based on the index (number of sections already created)
    console.log("Creating section for block "+block_id+"...");
    var section_color = function(hex){
      hex = typeof hex !== 'undefined' ? hex : false;
      colors = ['gray', 'white'];
      hex_colors = ["#ecf0f1", "#fff"];
      if (hex){
        section_index = ($('section').length) % 2;
        return hex_colors[section_index];
      }
      section_index = ($('section').length + 1) % 2;
      return colors[section_index];
    };

    //add the chevron/down arrow and div to go down to next section
    $('#onepage section:last').append('<div class="bottom-hint-'+ section_color()+'"><i class="fa fa-chevron-down"></i></div><div class="bottom-padding-'+section_color()+'"></div>');

    //adds the section (method in jquery.onepage-scroll)
    $('.main').addSection();

    $('#onepage section:last').css("background-color",section_color(true));

    //---Append description to the section--//
    $('#onepage section:last').append(new_section_html);
    var curr = null;
    // template choice divs
    var horizontal = $("#horizontal-" + block_id);
    var vertical = $("#vertical-" + block_id);
    var center = $("#center-" + block_id);

    // chosen template div
    var chosen_horizontal = $("#chosen_horizontal_" + block_id);
    var chosen_vertical = $("#chosen_vertical_" + block_id);
    var chosen_center = $("#chosen_center_" + block_id);
    
    // sidebar template div
    var sidebar_horizontal = $("#chosen_sidebar_horizontal_");
    var sidebar_vertical = $("#chosen_sidebar_vertical_" );
    var sidebar_center = $("#chosen_sidebar_center_" );

    chosen_horizontal.hide();
    chosen_center.fadeOut();
    chosen_vertical.fadeOut();

    $(horizontal).click(function() {
      curr = chosen_horizontal;
      console.log("I am in horizontal");
      $("#template_selection_heading").remove();
      horizontal.hide();
      vertical.fadeOut();
      center.fadeOut();
      chosen_horizontal.fadeIn();
    });


    $(vertical).click(function() {
      curr = chosen_vertical;
      console.log("I am in vertical");
      $("#template_selection_heading").remove();
      horizontal.fadeOut();
      vertical.fadeOut();
      center.fadeOut();
      chosen_vertical.fadeIn();
    });

    $(center).click(function() {
      curr = chosen_center;
      console.log("I am in center");
      $("#template_selection_heading").remove();
      horizontal.fadeOut();
      vertical.fadeOut();
      center.fadeOut();
      chosen_center.fadeIn();
    });

    $(sidebar_horizontal).click(function() {
       if (curr == null){
        $("#template_selection_heading").remove();
        horizontal.fadeOut();
        vertical.fadeOut();
        center.fadeOut();
      }
      else {
        $(curr).fadeOut();
      }
      curr = chosen_horizontal;
      $(curr).fadeIn();
    });

    $(sidebar_vertical).click(function() {
      if (curr == null){
        $("#template_selection_heading").remove();
        horizontal.fadeOut();
        vertical.fadeOut();
        center.fadeOut();
      }
      else {
        $(curr).fadeOut();
      }
      curr = chosen_vertical;
      $(curr).fadeIn();
    });

    $(sidebar_center).click(function() {
       if (curr == null){
        $("#template_selection_heading").remove();s
        horizontal.fadeOut();
        vertical.fadeOut();
        center.fadeOut();
      }
      else {
        $(curr).fadeOut();
      }
      curr = chosen_center;
      $(curr).fadeIn();
    });
    //----Append the 'add section' button to end of section--//
    $('#onepage section:last').append($('<%= j render "plusBlock" %>'));
    //////////////

  };

  ///// Handle attaching resources to specific positions in a block
  /* Javascript representation for a resource in Rails.
  Maintains the type and id of a resource.
  */
  var Resource = function() {
    var resource_id = null;
    var resource_type = null;
    var object = {
      update: function (type, id) {
        resource_type = type;
        resource_id = id;
      },
      get_id: function() { return resource_id},
      get_type: function() { return resource_type},
    };

    return object;
  };

  /* Javascript representation for a block in Rails.
  Maintains the information about the block as it is modified
  and updates the block's form accordingly */
  Block = function (bid) {
    var block_id = bid;
    var res0 = Resource(); // Single Resource
    var res1 = Resource(); // Left Resource
    var res2 = Resource(); // Right Resource
    var res3 = Resource(); // Top Resource
    var res4 = Resource(); // Bottom Resource

    var template_id = -1;
    var template1 = $("#chosen_center_"+block_id);
    var template2 = $("#chosen_horizontal_"+block_id);
    var template3 = $("#chosen_vertical_"+block_id);
    var form = $("#block-"+block_id+" form");

    // Takes a resource and sets the firstres input fields in the form to its type and id
    // Clears the input fields if res is undefined
    var set_firstres_in_form = function (res) {
      if (res === undefined) {
        form.find("#block_firstres_id").val("");
        form.find("#block_firstres_type").val("");
        return;
      }
      form.find("#block_firstres_id").val(res.get_id());
      form.find("#block_firstres_type").val(res.get_type());
    }

    // Takes a resource and sets the secondres input fields in the form to its type and id
    // Clears the input fields if res is undefined
    var set_secondres_in_form = function (res) {
      if (res === undefined) {
        form.find("#block_secondres_id").val("");
        form.find("#block_secondres_type").val("");
        return;
      }
      form.find("#block_secondres_id").val(res.get_id());
      form.find("#block_secondres_type").val(res.get_type());
    }
    
    // the object to be returned that holds all of block's "public" functions
    var self = createObject(Block.prototype);
    // Sets the template_id of the block to tid
    self.set_template = function (tid) {
      template_id = tid;
    };

    // Updates the resource at position res_pos in the block's template
    // to have the type and id specified
    // Also set the view of that resource in the block to the provided partial
    self.update_resource = function (res_pos, partial, type, id) {
      console.log("Updating resource at position " + res_pos);
      if (res_pos === 0 ) {
        res0.update(type, id);
      } else if (res_pos === 1) {
        res1.update(type, id);
      } else if (res_pos === 2) {
        res2.update(type, id);
      } else if (res_pos === 3) {
        res3.update(type, id);
      } else if (res_pos === 4) {
        res4.update(type, id);
      }
    };

    self.swap_resources = function () {
      if (template_id === 1) { // Single Resource Template
        console.error("Cannot swap resources on template 1");
      } else if (template_id === 2) { // Left/Right Template
        console.log("Swapping left and right resources");
        var temp_res = res1;
        res1= res2;
        res2 = temp_res;
      } else if (template_id === 3) { // Top/Bottom Template
        console.log("Swapping top and bottom resources");
        var temp_res = res3;
        res3= res4;
        res4 = temp_res;
      } else {
        console.error("Cannot swap resources of undefined template");
      }
    };

    self.save = function () {
      console.log("Saving block with template ");
      // Set the template id if valid
      if (template_id === 1 || template_id === 2 || template_id === 3) {
        form.find("#block_template_id").val(template_id);
      } else {
        console.error("Cannot save block with invalid template " + template_id);
        return;
      }

      // Set the resources based on the current template
      if (template_id === 1) { // Single Resource Template
        set_firstres_in_form(res0);
        set_secondres_in_form();
      } else if (template_id === 2) { // Left/Right Template
        set_firstres_in_form(res1);
        set_secondres_in_form(res2);
      } else if (template_id === 3) { // Top/Bottom Template
        set_firstres_in_form(res3);
        set_secondres_in_form(res4);
      } 
      form.submit();
    }

    Object.freeze(self);
    return self;

  };


         
});

$(function() {
  
  $(".resource-select-btn").click(function(event) {
    clicked_resource = $(this);
    console.log("Resource clicked");
    console.log(clicked_resource);
  });

  // intentionally global
  update_resource_with_partial = function (partial, type, id) {
    console.log("Updating resource with partial");
    var target = clicked_resource.parent().parent();
   
    if (target.attr('id') === "single-resource") {
        console.log("Updating single resource");
        single_resource.update(type, id);
    } else if (target.attr('id') === "resource1") {
        console.log("Updating resource1");
        resource1.update(type, id);
    } else if (target.attr('id') === "resource2") {
        console.log("Updating resource2");
        resource2.update(type, id);
    }

    target.html(partial);
    embed_gists();
  };

  // Set the hidden fields in the form based on the resources the user has created
  $("#new_block").submit( function (event) {
    console.log("Form submitted");
    // check which radio button is selected in order to know which resources to use
    var radioOpt = $('input[name="block[template_id]"]:checked', '#new_block').val();
    console.log("Selected radio button: " + radioOpt);            
    if (radioOpt == 1) {
        console.log("Using template 1");
        console.log("Single resource id: " + single_resource.get_id());
        console.log("Single resource type: " + single_resource.get_type());
        $("#block_firstres_id").val(single_resource.get_id());
        $("#block_firstres_type").val(single_resource.get_type());

    } else if (radioOpt == 2) {
        console.log("using template 2");
        console.log("First resource id: " + resource1.get_id());
        console.log("First resource type: " + resource1.get_type());
        $("#block_firstres_id").val(resource1.get_id());
        $("#block_firstres_type").val(resource1.get_type());

        console.log("Second resource id: " + resource2.get_id());
        console.log("Second resource type: " + resource2.get_type());
        $("#block_secondres_id").val(resource2.get_id());
        $("#block_secondres_type").val(resource2.get_type());
    }
  });

});